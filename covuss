#!/usr/bin/env python

import sys
import re
import argparse
from copy import deepcopy

CVSSv2_BASE_GROUP = [
    {
        'name': 'AV',
        'full_name': 'Access Vector (AV)',
        'full_options': ['(L)ocal', '(A)djacent Network', '(N)etwork'],
        'options': ['L', 'A', 'N'],
        'scoring': {'L': 0.395, 'A': 0.646, 'N': 1},
        'help': """
This metric reflects how the vulnerability is exploited. The more remote an
attacker can be to attack a host, the greater the vulnerability score.

Local (L)       A vulnerability exploitable with only local access requires the
            attacker to have either physical access to the vulnerable
            system or a local (shell) account. Examples of locally
            exploitable vulnerabilities are peripheral attacks such as
            Firewire/USB DMA attacks, and local privilege escalations
            (e.g., sudo).

Adjacent Network (A)
            A vulnerability exploitable with adjacent network access
            requires the attacker to have access to either the broadcast or
            collision domain of the vulnerable software.  Examples of local
            networks include local IP subnet, Bluetooth, IEEE 802.11, and
            local Ethernet segment.

Network (N)     A vulnerability exploitable with network access means the
            vulnerable software is bound to the network stack and the
            attacker does not require local network access or local access.
            Such a vulnerability is often termed "remotely exploitable".
            An example of a network attack is an RPC buffer overflow.
"""},
    {
        'name': 'AC',
        'full_name': 'Access Complexity (AC)',
        'full_options': ['(H)igh', '(M)edium', '(L)ow'],
        'options': ['H', 'M', 'L'],
        'scoring': {'H': 0.35, 'M': 0.61, 'L': 0.71},
        'help': """
This metric measures the complexity of the attack required to exploit the
vulnerability once an attacker has gained access to the target system. For
example, consider a buffer overflow in an Internet service: once the target
system is located, the attacker can launch an exploit at will.

Other vulnerabilities, however, may require additional steps in order to be
exploited. For example, a vulnerability in an email client is only exploited
after the user downloads and opens a tainted attachment. The lower the required
complexity, the higher the vulnerability score.

High (H)        Specialized access conditions exist. For example:
            * In most configurations, the attacking party must already have
              elevated privileges or spoof additional systems in addition
              to the attacking system (e.g., DNS hijacking).
            * The attack depends on social engineering methods that would be
              easily detected by knowledgeable people. For example, the
              victim must perform several suspicious or atypical actions.
            * The vulnerable configuration is seen very rarely in practice.
            * If a race condition exists, the window is very narrow.

Medium (M)      The access conditions are somewhat specialized; the following
            are examples:
            * The attacking party is limited to a group of systems or users
              at some level of authorization, possibly untrusted.
            * Some information must be gathered before a successful attack
              can be launched.
            * The affected configuration is non-default, and is not
              commonly configured (e.g., a vulnerability present when
              a server performs user account authentication via a specific
              scheme, but not present for another authentication scheme).
            * The attack requires a small amount of social engineering that
              might occasionally fool cautious users (e.g., phishing
              attacks that modify a web browsers status bar to show a false
              link, having to be on someones buddy list before sending an
              IM exploit).

Low (L)         Specialized access conditions or extenuating circumstances do
            not exist. The following are examples:
            * The affected product typically requires access to a wide range
              of systems and users, possibly anonymous and untrusted
              (e.g., Internet-facing web or mail server).
            * The affected configuration is default or ubiquitous.
            * The attack can be performed manually and requires little
              skill or additional information gathering.
            * The race condition is a lazy one (i.e., it is technically
              a race but easily winnable).
"""},
    {
        'name': 'Au',
        'full_name': 'Authentication (Au)',
        'full_options': ['(M)ultiple', '(S)ingle', '(N)one'],
        'options': ['M', 'S', 'N'],
        'scoring': {'M': 0.45, 'S': 0.56, 'N': 0.704},
        'help': """
This metric measures the number of times an attacker must authenticate to a
target in order to exploit a vulnerability. This metric does not gauge the
strength or complexity of the authentication process, only that an attacker is
required to provide credentials before an exploit may occur. The fewer
authentication instances that are required, the higher the vulnerability score.

Multiple (M)    Exploiting the vulnerability requires that the attacker
            authenticate two or more times, even if the same credentials
            are used each time. An example is an attacker authenticating to
            an operating system in addition to providing credentials to
            access an application hosted on that system.

Single (S)      The vulnerability requires an attacker to be logged into the
            system (such as at a command line or via a desktop session or
            web interface).

None (N)        Authentication is not required to exploit the vulnerability.

The metric should be applied based on the authentication the attacker requires
before launching an attack.  For example, if a mail server is vulnerable to a
command that can be issued before a user authenticates, the metric should be
scored as "None" because the attacker can launch the exploit before credentials
are required.  If the vulnerable command is only available after successful
authentication, then the vulnerability should be scored as "Single" or
"Multiple," depending on how many instances of authentication must occur before
issuing the command.
"""},
    {
        'name': 'C',
        'full_name': 'Confidentiality impact (C)',
        'full_options': ['(N)one', '(P)artial', '(C)omplete'],
        'options': ['N', 'P', 'C'],
        'scoring': {'N': 0, 'P': 0.275, 'C': 0.66},
        'help': """
This metric measures the impact on confidentiality of a successfully exploited
vulnerability. Confidentiality refers to limiting information access and
disclosure to only authorized users, as well as preventing access by, or
disclosure to, unauthorized ones. Increased confidentiality impact increases
the vulnerability score.

None (N)        There is no impact to the confidentiality of the system.

Partial (P)     There is considerable informational disclosure. Access to some
            system files is possible, but the attacker does not have
            control over what is obtained, or the scope of the loss is
            constrained. An example is a vulnerability that divulges only
            certain tables in a database.

Complete (C)    There is total information disclosure, resulting in all system
            files being revealed. The attacker is able to read all of the
            system's data (memory, files, etc.)
"""},
    {
        'name': 'I',
        'full_name': 'Integrity impact (I)',
        'full_options': ['(N)one', '(P)artial', '(C)omplete'],
        'options': ['N', 'P', 'C'],
        'scoring': {'N': 0, 'P': 0.275, 'C': 0.66},
        'help': """
This metric measures the impact to integrity of a successfully exploited
vulnerability. Integrity refers to the trustworthiness and guaranteed veracity
of information. Increased integrity impact increases the vulnerability score.

None (N)        There is no impact to the integrity of the system.

Partial (P)     Modification of some system files or information is possible,
            but the attacker does not have control over what can be
            modified, or the scope of what the attacker can affect is
            limited. For example, system or application files may be
            overwritten or modified, but either the attacker has no control
            over which files are affected or the attacker can modify files
            within only a limited context or scope.

Complete (C)    There is a total compromise of system integrity. There is a
            complete loss of system protection, resulting in the entire
            system being compromised. The attacker is able to modify any
            files on the target system.
"""},
    {
        'name': 'A',
        'full_name': 'Availability impact (A)',
        'full_options': ['(N)one', '(P)artial', '(C)omplete'],
        'options': ['N', 'P', 'C'],
        'scoring': {'N': 0, 'P': 0.275, 'C': 0.66},
        'help': """
This metric measures the impact to availability of a successfully exploited
vulnerability. Availability refers to the accessibility of information
resources. Attacks that consume network bandwidth, processor cycles, or disk
space all impact the availability of a system. Increased availability impact
increases the vulnerability score.

None (N)        There is no impact to the availability of the system.

Partial (P)     There is reduced performance or interruptions in resource
            availability. An example is a network-based flood attack that
            permits a limited number of successful connections to an
            Internet service.

Complete (C)    There is a total shutdown of the affected resource. The
            attacker can render the resource completely unavailable.
"""}
]

CVSSv2_TEMPORAL_HELP = """
The threat posed by a vulnerability may change over time. Three such factors
that CVSS captures are: confirmation of the technical details of a
vulnerability, the remediation status of the vulnerability, and the
availability of exploit code or techniques. Since temporal metrics are optional
they each include a metric value that has no effect on the score. This value is
used when the user feels the particular metric does not apply and wishes to
"skip over" it.
"""

CVSSv2_TEMPORAL_GROUP = [
    {
        'name': 'E',
        'full_name': 'Exploitability (E)',
        'full_options': ['(U)nproven', 'Proof-of-Concept (POC)',
            '(F)unctional', '(H)igh', 'Not Defined (ND)'],
        'options': ['U', 'POC', 'F', 'H', 'ND'],
        'scoring': {'U': 0.85, 'POC': 0.9, 'F': 0.95, 'H': 1, 'ND': 1},
        'help': """
This metric measures the current state of exploit techniques or code
availability. Public availability of easy-to-use exploit code increases the
number of potential attackers by including those who are unskilled, thereby
increasing the severity of the vulnerability.

Initially, real-world exploitation may only be theoretical. Publication of
proof of concept code, functional exploit code, or sufficient technical details
necessary to exploit the vulnerability may follow. Furthermore, the exploit
code available may progress from a proof-of-concept demonstration to exploit
code that is successful in exploiting the vulnerability consistently. In severe
cases, it may be delivered as the payload of a network-based worm or virus.
The more easily a vulnerability can be exploited, the higher the vulnerability
score.

Unproven (U)    No exploit code is available, or an exploit is entirely
            theoretical.

Proof-of-Concept (POC)
            Proof-of-concept exploit code or an attack demonstration that
            is not practical for most systems is available. The code or
            technique is not functional in all situations and may require
            substantial modification by a skilled attacker.

Functional (F)  Functional exploit code is available. The code works in most
            situations where the vulnerability exists.

High (H)        Either the vulnerability is exploitable by functional mobile
            autonomous code, or no exploit is required (manual trigger) and
            details are widely available. The code works in every
            situation, or is actively being delivered via a mobile
            autonomous agent (such as a worm or virus).

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.
"""},
    {
        'name': 'RL',
        'full_name': 'Remedation Level (RL)',
        'full_options': ['Official Fix (OF)', 'Temporary Fix (TF)',
            '(W)orkaround', '(U)navailable', 'Not Defined (ND)'],
        'options': ['OF', 'TF', 'W', 'U', 'ND'],
        'scoring': {'OF': 0.87, 'TF': 0.9, 'W': 0.95, 'U': 1, 'ND': 1},
        'help': """
The remediation level of a vulnerability is an important factor for
prioritization. The typical vulnerability is unpatched when initially
published. Workarounds or hotfixes may offer interim remediation until an
official patch or upgrade is issued. Each of these respective stages adjusts
the temporal score downwards, reflecting the decreasing urgency as remediation
becomes final. The less official and permanent a fix, the higher the
vulnerability score is.

Official Fix (OF)
            A complete vendor solution is available. Either the vendor has
            issued an official patch, or an upgrade is available.

Temporary Fix (TF)
            There is an official but temporary fix available. This includes
            instances where the vendor issues a temporary hotfix, tool, or
            workaround.

Workaround (W)  There is an unofficial, non-vendor solution available. In some
            cases, users of the affected technology will create a patch of
            their own or provide steps to work around or otherwise mitigate
            the vulnerability.

Unavailable (U) There is either no solution available or it is impossible to
            apply.

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.
"""},
    {
        'name': 'RC',
        'full_name': 'Report Confidence (RC)',
        'full_options': ['Unconfirmed (UC)', 'Uncorroborated (UR)',
            '(C)onfirmed', 'Not Defined (ND)'],
        'options': ['UC', 'UR', 'C', 'ND'],
        'scoring': {'UC': 0.9, 'UR': 0.95, 'C': 1, 'ND': 1},
        'help': """
This metric measures the degree of confidence in the existence of the
vulnerability and the credibility of the known technical details. Sometimes,
only the existence of vulnerabilities are publicized, but without specific
details. The vulnerability may later be corroborated and then confirmed through
acknowledgement by the author or vendor of the affected technology. The urgency
of a vulnerability is higher when a vulnerability is known to exist with
certainty. This metric also suggests the level of technical knowledge available
to would-be attackers. The more a vulnerability is validated by the vendor or
other reputable sources, the higher the score.

Unconfirmed (UC)
            There is a single unconfirmed source or possibly multiple
            conflicting reports. There is little confidence in the validity
            of the reports.
            An example is a rumor that surfaces from the hacker
            underground.

Uncorroborated (UR)
            There are multiple non-official sources, possibly including
            independent security companies or research organizations. At
            this point there may be conflicting technical details or some
            other lingering ambiguity.

Confirmed (C)   The vulnerability has been acknowledged by the vendor or author
            of the affected technology. The vulnerability may also be
            Confirmed when its existence is confirmed from an external
            event such as publication of functional or proof-of-concept
            exploit code or widespread exploitation.

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.
"""}
]

common_full_options = ['(L)ow', '(M)edium', '(H)igh', 'Not Defined (ND)']
common_options = ['L', 'M', 'H', 'ND']
common_scoring = {'L': 0.5, 'M': 1, 'H': 1.51, 'ND': 1}

common_help = """
These metrics enable the analyst to customize the CVSS score depending on the
importance of the affected IT asset to a users organization, measured in terms
of confidentiality, integrity, and availability, That is, if an IT asset
supports a business function for which availability is most important, the
analyst can assign a greater value to availability, relative to confidentiality
and integrity. Each security requirement has three possible values: low,
medium, or high.

The full effect on the environmental score is determined by the corresponding
base impact metrics (please note that the base confidentiality, integrity and
availability impact metrics, themselves, are not changed). That is, these
metrics modify the environmental score by reweighting the (base)
confidentiality, integrity, and availability impact metrics. For example, the
confidentiality impact (C) metric has increased weight if the confidentiality
requirement (CR) is high. Likewise, the confidentiality impact metric has
decreased weight if the confidentiality requirement is low. The confidentiality
impact metric weighting is neutral if the confidentiality requirement is
medium. This same logic is applied to the integrity and availability
requirements.

Note that the confidentiality requirement will not affect the environmental
score if the (base) confidentiality impact is set to none. Also, increasing the
confidentiality requirement from medium to high will not change the
environmental score when the (base) impact metrics are set to complete. This is
because the impact sub score (part of the base score that calculates impact) is
already at a maximum value of 10.

The greater the security requirement, the higher the score (remember that
medium is considered the default). These metrics will modify the score as much
as plus or minus 2.5.

Low (L)         Loss of [confidentiality | integrity | availability] is likely
            to have only a limited adverse effect on the organization or
            individuals associated with the organization (e.g., employees,
            customers).

Medium (M)      Loss of [confidentiality | integrity | availability] is likely
            to have a serious adverse effect on the organization or
            individuals associated with the organization (e.g., employees,
            customers).

High (H)        Loss of [confidentiality | integrity | availability] is likely
            to have a catastrophic adverse effect on the organization or
            individuals associated with the organization (e.g., employees,
            customers).

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.
"""

CVSSv2_ENVIRONMENTAL_HELP = """
Different environments can have an immense bearing on the risk that a
vulnerability poses to an organization and its stakeholders. The CVSS
environmental metric group captures the characteristics of a vulnerability that
are associated with a user's IT environment. Since environmental metrics are
optional they each include a metric value that has no effect on the score. This
value is used when the user feels the particular metric does not apply and
wishes to "skip over" it.
"""

CVSSv2_ENVIRONMENTAL_GROUP = [
    {
        'name': 'CDP',
        'full_name': 'Collateral Damage Potential (CDP)',
        'full_options': ['(N)one', '(L)ow', 'Low-Medium (LM)',
            'Medium-High (MH)', '(H)igh', 'Not Defined (ND)'],
        'options': ['N', 'L', 'LM', 'MH', 'H', 'ND'],
        'scoring': {'N': 0, 'L': 0.1, 'LM': 0.3, 'MH': 0.4, 'H': 0.5, 'ND': 0},
        'help': """
This metric measures the potential for loss of life or physical assets through
damage or theft of property or equipment.  The metric may also measure economic
loss of productivity or revenue. Naturally, the greater the damage potential,
the higher the vulnerability score.

None (N)        There is no potential for loss of life, physical assets,
            productivity or revenue.

Low (L)         A successful exploit of this vulnerability may result in slight
            physical or property damage. Or, there may be a slight loss of
            revenue or productivity to the organization.

Low-Medium (LM) A successful exploit of this vulnerability may result in
            moderate physical or property damage. Or, there may be a
            moderate loss of revenue or productivity to the organization.

Medium-High (MH)
            A successful exploit of this vulnerability may result in
            significant physical or property damage or loss. Or, there may
            be a significant loss of revenue or productivity.

High (H)        A successful exploit of this vulnerability may result in
            catastrophic physical or property damage and loss. Or, there
            may be a catastrophic loss of revenue or productivity.

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.

Clearly, each organization must determine for themselves the precise meaning of
"slight, moderate, significant, and catastrophic."
"""},
    {
        'name': 'TD',
        'full_name': 'Target Distribution (TD)',
        'full_options': ['(N)one', '(L)ow', '(M)edium', '(H)igh',
            'Not Defined (ND)'],
        'options': ['N', 'L', 'M', 'H', 'ND'],
        'scoring': {'N': 0, 'L': 0.25, 'M': 0.75, 'H': 1, 'ND': 1},
        'help': """
This metric measures the proportion of vulnerable systems. It is meant as an
environment-specific indicator in order to approximate the percentage of
systems that could be affected by the vulnerability. The greater the proportion
of vulnerable systems, the higher the score.

None (N)        No target systems exist, or targets are so highly specialized
            that they only exist in a laboratory setting. Effectively 0% of
            the environment is at risk.

Low (L)         Targets exist inside the environment, but on a small scale.
            Between 1% - 25% of the total environment is at risk.

Medium (M)      Targets exist inside the environment, but on a medium scale.
            Between 26% - 75% of the total environment is at risk.

High (H)        Targets exist inside the environment on a considerable scale.
            Between 76% - 100% of the total environment is considered at
            risk.

Not Defined (ND)
            Assigning this value to the metric will not influence the
            score. It is a signal to the equation to skip this metric.
"""},
    {
        'name': 'CR',
        'full_name': 'Confidentiality Requirement (CR)',
        'full_options': common_full_options,
        'options': common_options,
        'scoring': common_scoring,
        'help': common_help},
    {
        'name': 'IR',
        'full_name': 'Integrity Requirement (CR)',
        'full_options': common_full_options,
        'options': common_options,
        'scoring': common_scoring,
        'help': common_help},
    {
        'name': 'AR',
        'full_name': 'Availability Requirement (CR)',
        'full_options': common_full_options,
        'options': common_options,
        'scoring': common_scoring,
        'help': common_help}
]

CVSSv2 = \
    CVSSv2_BASE_GROUP + CVSSv2_TEMPORAL_GROUP + CVSSv2_ENVIRONMENTAL_GROUP

DETAIL_FLAG = False
COLOR_FLAG = False


def error(msg):
    print(color('red', msg))
    sys.exit(1)


def color(color_name, msg):
    if not COLOR_FLAG:
        return msg
    return {
        'red':     '\x1b[31m',
        'green':   '\x1b[32m',
        'yellow':  '\x1b[33m',
        'blue':    '\x1b[34m'
    }[color_name] + msg + '\x1b[0m'


def score2color(score):
    color = 'green'
    if score > 3:
        color = 'yellow'
    if score > 6:
        color = 'red'
    return color


def verbose_score(msg, score):
    if DETAIL_FLAG:
        print(color(score2color(score), msg + ': ' + str(round(score, 1))))


def input_wrapper(prompt):
    """ Wrapping input() call to maintain Python 2/3 compatibility """
    input_fn = raw_input if sys.version_info[0] == 2 else input
    value = input_fn(prompt).strip().upper()
    if value == 'Q':
        sys.exit(0)
    return value


def parse_v2_check_required(cvss):
    missing_metrics = []
    for metric in CVSSv2_BASE_GROUP:
        if metric['name'] not in cvss:
            missing_metrics.append(metric['full_name'])
    if missing_metrics:
        error('Missing required metrics\n\t' + '\n\t'.join(missing_metrics))


def parse_v2_fill_not_defined(cvss):
    for metric in CVSSv2:
        if metric['name'] not in cvss and 'ND' in metric['options']:
            cvss[metric['name']] = 'ND'


def parse_v2(vector):
    cvss = {}
    for piece in vector.split('/'):
        avail = '\nAvailable metrics\n' + '\n'.join(
            ['\t' + m['full_name'] for m in CVSSv2])
        try:
            (key, value) = piece.split(':')
        except:
            error('Invalid metric "' + piece + '".' + avail)
        metric = next((m for m in CVSSv2 if m['name'] == key), None)
        if not metric:
            error('Invalid metric "' + key + '".' + avail)
        if value not in metric['options']:
            error(
                'Invalid value "' + value
                + '" for ' + metric['full_name'] + ' metric. '
                + "\nAvailable values\n\t" +
                    '\n\t'.join(metric['full_options']))
        if key in cvss:
            error('Duplicate metric "' + key + '".')
        cvss[key] = value
    parse_v2_check_required(cvss)
    parse_v2_fill_not_defined(cvss)
    return cvss


def cvss_v2_to_vector(cvss):
    pieces = []
    for metric in [m['name'] for m in CVSSv2_BASE_GROUP]:
        pieces.append(metric + ':' + cvss[metric])
    if contains_v2_temporal(cvss):
        for metric in [m['name'] for m in CVSSv2_TEMPORAL_GROUP]:
            pieces.append(metric + ':' + cvss[metric])
    if contains_v2_environmental(cvss):
        for metric in [m['name'] for m in CVSSv2_TEMPORAL_GROUP]:
            pieces.append(metric + ':' + cvss[metric])
    return '/'.join(pieces)


def score_v2_evaluate(cvss):
    """ Replaces symbolic values with respective numbers """
    evaluated_cvss = {}
    for metric in CVSSv2:
        key = metric['name']
        evaluated_cvss[key] = metric['scoring'][cvss[key]]
    return evaluated_cvss


def score_v2_base(cvss):
    impact = 10.41 * (1 - (1 - cvss['C']) * (1 - cvss['I']) * (1 - cvss['A']))
    verbose_score('Impact score', impact)
    exploitability = 20 * cvss['AV'] * cvss['AC'] * cvss['Au']
    verbose_score('Exploitability score', exploitability)
    f_impact = 0 if impact == 0 else 1.176
    return (
        round(
            ((0.6 * impact) + (0.4 * exploitability) - 1.5) * f_impact, 1),
        exploitability,
        f_impact)


def score_v2_temporal(base, cvss):
    return round(base * cvss['E'] * cvss['RL'] * cvss['RC'], 1)


def score_v2_environmental(exploitability, f_impact, cvss):
    adjusted_impact = min(
        10,
        10.41 * (1 -
            (1 - cvss['C'] * cvss['CR'])
            * (1 - cvss['I'] * cvss['IR'])
            * (1 - cvss['A'] * cvss['AR'])))  # https://xkcd.com/297
    verbose_score('Adjusted impact score', adjusted_impact)
    adjusted_base = round(
        ((0.6 * adjusted_impact) + (0.4 * exploitability) - 1.5) * f_impact, 1)
    verbose_score('Adjusted base score', adjusted_base)
    adjusted_temporal = score_v2_temporal(adjusted_base, cvss)
    verbose_score('Adjusted temporal score', adjusted_temporal)
    return round(
        (adjusted_temporal + (10 - adjusted_temporal) * cvss['CDP'])
        * cvss['TD'], 1)


def contains_v2_temporal(cvss):
    return any(
        cvss[metric] != 'ND' for metric in [
            m['name'] for m in CVSSv2_TEMPORAL_GROUP])


def contains_v2_environmental(cvss):
    return any(
        cvss[metric] != 'ND' for metric in [
            m['name'] for m in CVSSv2_ENVIRONMENTAL_GROUP])


def score_v2(cvss):
    overall_score = 0
    e_cvss = score_v2_evaluate(cvss)
    base, exploitability, f_impact = score_v2_base(e_cvss)
    verbose_score('Base score', base)
    overall_score = base
    if contains_v2_temporal(cvss):
        temporal = score_v2_temporal(base, e_cvss)
        verbose_score('Temporal score', temporal)
        overall_score = temporal
    if contains_v2_environmental(cvss):
        environmental = score_v2_environmental(
            exploitability, f_impact, e_cvss)
        verbose_score('Environmental score', environmental)
        overall_score = environmental
    return overall_score


def arg_handling():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-d", "--detail", help="display detailed scoring", action="store_true",
        required=False)
    parser.add_argument(
        "-p", "--pretty", help="color the output",
        action="store_true", required=False)
    group = parser.add_mutually_exclusive_group()
    group.add_argument(
        "-i", "--interactive", help="enter interactive mode",
        action="store_true", required=False)
    group.add_argument(
        "vector", metavar="CVSS VECTOR", help="CVSS vector", nargs='?')
    return parser.parse_args()


def interactive_paged_print(prompt_lines, str):
    lines = str.split('\n')
    i = 0
    while lines:
        print(lines.pop(0))
        i += 1
        if i == 24:
            input_wrapper('-- (press enter)')
            i = 0
    if i + prompt_lines >= 24:
        input_wrapper('-- (press enter)')


def interactive_build_prompt(metric_name, options):
    prompt = '\n' + color('blue', metric_name)
    for option in (options + ['(?)']):
        prompt += '\n\t' + color('yellow', option)
    return prompt + '\n> '


def interactive_go_through_group(group, cvss):
    for metric in group:
        while metric['name'] not in cvss:
            prompt = interactive_build_prompt(
                metric['full_name'], metric['full_options'])
            prompt_lines = len(prompt.split('\n'))
            value = input_wrapper(prompt)
            if value == '?':
                interactive_paged_print(prompt_lines, metric['help'])
            elif value not in metric['options']:
                print(
                    color(
                        'red',
                        'Invalid value. Please choose from given options.'))
            else:
                cvss[metric['name']] = value


def interactive_continue_with(group_name, group_help):
    while True:
        value = input_wrapper(
            color(
                'blue',
                '\nContinue with ' + group_name + ' metrics group? [y/N/?]: '))
        if value == '?':
            interactive_paged_print(1, group_help)
        elif value not in ['Y', 'N', '']:
            print(color('red', "Sorry, I don't understand."))
        else:
            break
    return value in ['y', 'Y']


def interactive():
    print("Let's build some CVSS!")
    cvss = {}
    interactive_go_through_group(CVSSv2_BASE_GROUP, cvss)
    if interactive_continue_with('Temporal', CVSSv2_TEMPORAL_HELP):
        interactive_go_through_group(CVSSv2_TEMPORAL_GROUP, cvss)
    if interactive_continue_with('Environmental', CVSSv2_ENVIRONMENTAL_HELP):
        interactive_go_through_group(CVSSv2_ENVIRONMENTAL_GROUP, cvss)
    parse_v2_fill_not_defined(cvss)
    print('\nVector: ' + cvss_v2_to_vector(cvss))
    return cvss


def main():
    global DETAIL_FLAG
    global COLOR_FLAG
    args = arg_handling()
    DETAIL_FLAG = args.interactive or args.vector is None or args.detail
    COLOR_FLAG = bool(args.pretty)
    cvss = parse_v2(args.vector) if args.vector is not None else interactive()
    overall_cvss_score = score_v2(cvss)
    if DETAIL_FLAG:
        verbose_score('Overall CVSS score', overall_cvss_score)
    else:
        print(overall_cvss_score)


try:
    main()
except (KeyboardInterrupt, EOFError):
    print('')
    pass
except Exception as e:
    print("Fatal error: " + str(e))
    print('Please file a bug report: https://github.com/mkopta/covuss')
    sys.exit(2)
